<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on Veerendra&#39;s Blog</title>
    <link>https://veerendra2.github.io/tags/docker/</link>
    <description>Recent content in Docker on Veerendra&#39;s Blog</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <lastBuildDate>Thu, 18 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://veerendra2.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Traefik HTTPS Config with DuckDNS for Local Homeserver</title>
      <link>https://veerendra2.github.io/traefik-https/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/traefik-https/</guid>
      <description>&lt;p&gt;This is a how-to guide inspired by &lt;a href=&#34;https://www.youtube.com/watch?v=qlcVx-k-02E&#34;&gt;&amp;ldquo;Quick and Easy SSL Certificates for Your Homelab!&amp;rdquo;&lt;/a&gt;&amp;quot; focus on Traefik reverse proxy server. Although this guide focuses on DuckDNS, a similar configuration can apply to any DNS provider.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://veerendra2.github.io/static_content/images/blog-18-1.png&#34; alt=&#34;blog-14-1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;The trick is by setting private IP for the domain name you own, in my case DuckDNS.&lt;/p&gt;
&lt;h2 id=&#34;get-duckdns-sub-domain&#34;&gt;Get DuckDNS Sub-Domain&lt;/h2&gt;
&lt;p&gt;Sign-up an account in &lt;a href=&#34;https://duckdns.org/&#34;&gt;duckdns.org&lt;/a&gt;, choose a sub-domain(As I choose a dummy sub-domain &lt;code&gt;lser.duckdns.org&lt;/code&gt;) and add your home server IP address(In my case &lt;code&gt;192.168.0.120&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wireguard VPN and BitTorrent on Docker Swarm (Part 1)</title>
      <link>https://veerendra2.github.io/wireguard-qbittorrent-docker-swarm-1/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/wireguard-qbittorrent-docker-swarm-1/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;One of the services I always wanted to have on my &lt;a href=&#34;https://github.com/veerendra2/raspberrypi-homeserver&#34;&gt;raspberry pi home server&lt;/a&gt; is VPN and BitTorrent, which basically, route all BitTorrent traffic through a VPN container. Then I saw Wolfgang&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=SMF301vQqJo&#34;&gt;&amp;ldquo;Set Up Your Own Wireguard VPN Server with 2FA in 5 Minutes!&amp;rdquo;&lt;/a&gt; on Youtube, which inspired me to set up my own VPN server. I quickly created an instance on Oracle Cloud and ran the &lt;a href=&#34;https://github.com/notthebee/ansible-easy-vpn&#34;&gt;ansible playbook&lt;/a&gt; to deploy the wireguard VPN. After I tested a few months on Mobile and PC, I&amp;rsquo;m comfortable setting up server and client. So, I decided to use the Wireguard in my &lt;a href=&#34;https://github.com/veerendra2/raspberrypi-homeserver&#34;&gt;raspberrypi-homeserver&lt;/a&gt; project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wireguard VPN and BitTorrent on Docker Swarm (Part 2)</title>
      <link>https://veerendra2.github.io/wireguard-qbittorrent-docker-swarm-2/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/wireguard-qbittorrent-docker-swarm-2/</guid>
      <description>&lt;p&gt;Previously in &lt;a href=&#34;https://veerendra2.github.io/wireguard-qbittorrent-docker-swarm-1/&#34; title=&#34;part 1&#34;&gt;part 1&lt;/a&gt;, we have deployed the qBittorrent with Wireguard VPN on docker swarm. In this part, we will test the deployment, configure qBittorrent and finish the blog with the kill switch configuration&lt;/p&gt;
&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;
&lt;p&gt;Below are the tests to make sure qBittorrent has access to the Internet through Wireguard VPN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;#x27a1;&amp;#xfe0f;Make sure Wireguard and qBittorrent containers are up and running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#x27a1;&amp;#xfe0f;Check you are able to ping Wireguard container from qBittorrent&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portainer vs Yacht</title>
      <link>https://veerendra2.github.io/portainer-vs-yacht/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/portainer-vs-yacht/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been working on my home server setup on Raspberry Pi 4. I&amp;rsquo;d like to deploy all of my services/tools in docker containers, and for that, I need a nice and fancy container management tool I want to have on my home server.&lt;/p&gt;
&lt;p&gt;I had checked multiple sources, and finally picked two; they are Portainer and Yacht. Portainer is a well-known container management tool and Yacht is fairly new. In this post, I would like to give my thoughts on both tools.&lt;/p&gt;</description>
    </item>
    <item>
      <title>User Namespace Isolation in Docker</title>
      <link>https://veerendra2.github.io/docker-userns-remap/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/docker-userns-remap/</guid>
      <description>&lt;p&gt;There is a cool feature in docker called &lt;code&gt;userns-remap&lt;/code&gt;, discovered while doing my RaspberryPi home server project; &lt;a href=&#34;https://github.com/veerendra2/raspberrypi-homeserver/issues/15#issuecomment-1296311979&#34;&gt;15#issuecomment-1296311979&lt;/a&gt;, I can just enable &lt;code&gt;userns-remap&lt;/code&gt; and docker does all remapping of &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; inside docker container to a non-root user on the host.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/security/userns-remap/&#34;&gt;https://docs.docker.com/engine/security/userns-remap/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;how-to-enable&#34;&gt;How to enable&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;*It is better to reinstall docker and remove all existing docker volumes&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add below &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;userns-remap&amp;#34;: &amp;#34;default&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Restart the docker daemon
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl restart docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Ansible automation &lt;a href=&#34;https://github.com/veerendra2/raspberrypi-homeserver/blob/main/tasks/docker.yml&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;in-action&#34;&gt;In-Action&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Run the Nginx container
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker run -it -d nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Inside, the process thinks it is running as root!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;veerendra@atom:~$ docker exec -it nginx whoami
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# But outside(on host namespace), the process running it as non-root user
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;veerendra@atom:~$ ps aux | grep nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165536    350093  0.0  0.0   6320  4688 ?        Ss   03:21   0:00 nginx: master process nginx -g daemon off;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350208  0.0  0.0   6788  4288 ?        S    03:21   0:01 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350209  0.0  0.0   6784  4284 ?        S    03:21   0:00 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350210  0.0  0.0   6784  4284 ?        S    03:21   0:01 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350212  0.0  0.0   6784  4284 ?        S    03:21   0:01 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;veerend+  937492  0.0  0.0   6420  1844 pts/0    S+   16:22   0:00 grep --color=auto nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see I have not specified any user while deploying the container, but the user inside the container is isolated i.e remapped to a non-root user(uid:&lt;code&gt;165637&lt;/code&gt;, gid:&lt;code&gt;165637&lt;/code&gt;) on the host&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pi-hole with DHCP Relay in Docker</title>
      <link>https://veerendra2.github.io/pihole-dhcp-relay/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/pihole-dhcp-relay/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been working on a RaspberryPi home server project for quite some time. The project is a collection of applications to run on RaspberryPi and all applications are deployable with &lt;code&gt;docker-compose&lt;/code&gt; files and ansible automation. One of the applications I was configuring is &lt;a href=&#34;https://pi-hole.net&#34;&gt;Pi-hole&lt;/a&gt;, a network-wide ad-blocker.&lt;/p&gt;
&lt;p&gt;I decided to use Pi-hole as also DHCP server for my LAN. When I look into &lt;a href=&#34;https://docs.pi-hole.net/docker/DHCP/&#34;&gt;docs&lt;/a&gt;, it says it has to be run as &lt;code&gt;network_mode: host&lt;/code&gt;, because it allows Pi-hole to listen to DHCP broadcast packets. If the Pi-hole is deployed in bridge mode, there is a Linux bridge(Think of it as a router for a second!) which won&amp;rsquo;t allow broadcast packets.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
