<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>security on Veerendra&#39;s Blog</title>
    <link>https://veerendra2.github.io/tags/security/</link>
    <description>Recent content in security on Veerendra&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://veerendra2.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>User Namespace Isolation in Docker</title>
      <link>https://veerendra2.github.io/docker-userns-remap/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/docker-userns-remap/</guid>
      <description>There is a cool feature in docker called userns-remap, discovered while doing my RaspberryPi home server project; 15#issuecomment-1296311979, I can just enable userns-remap and docker does all remapping of uid and gid inside docker container to a non-root user on the host.
https://docs.docker.com/engine/security/userns-remap/
How to enable *It is better to reinstall docker and remove all existing docker volumes
Add below /etc/docker/daemon.json { &amp;#34;userns-remap&amp;#34;: &amp;#34;default&amp;#34; } Restart the docker daemon $ sudo systemctl restart docker Ansible automation here In-Action # Run the Nginx container $ docker run -it -d nginx # Inside, the process thinks it is running as root!</description>
    </item>
    
    <item>
      <title>Encrypt your DNS queries, stay anonymous</title>
      <link>https://veerendra2.github.io/dns-encrypt/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/dns-encrypt/</guid>
      <description>We think that connecting to a website over HTTPS is secure, which is true(not true sometimes!), but what about DNS queries that you(browser) send?
Sure if we use HTTPS, all your (POST or GET) data is encrypted end-to-end which prevents eavesdropping, MITM attack and have Confidentiality, but again what about DNS queries?
I got this question back in a while, so after a quick Internet search, I found DNSCrypt protocol which is really cool that I can encrypt DNS queries.</description>
    </item>
    
    <item>
      <title>Wifi Deauthentication Attack</title>
      <link>https://veerendra2.github.io/wifi-deathentication-attack/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/wifi-deathentication-attack/</guid>
      <description>A Wi-Fi deauthentication attack is a type of denial-of-service attack that targets communication between a user and a Wi-Fi wireless access point.
-Wikipedia
As you can see, this type of attack is pretty powerful and difficult to detect who is attacking. There are some tools(like “aircrack-ng”) for this attack(You can check the commands here).
So, basically the concept is the attacker broadcasts a wifi management “Deauthentication” frame to the victim&amp;rsquo;s devices/PC to tell them to deauthenticate.</description>
    </item>
    
    <item>
      <title>MAC Address Scrambling in Linux</title>
      <link>https://veerendra2.github.io/mac-scrambling/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/mac-scrambling/</guid>
      <description>“MAC Address Scrambling“- By name itself we can understand, instead of using a burned-in address, the machine uses a random MAC address. The machine/device changes MAC addresses regularly to improve security. MAC address is a 48 bit hexadecimal digit which is burned in every electronic device that has capability of “connectivity” such as mobile devices, smart TV, PC, etc. “Apple” added this feature to iPhones from iOS8 to protect user’s privacy.</description>
    </item>
    
  </channel>
</rss>
