<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Security on Veerendra&#39;s Blog</title>
    <link>https://veerendra2.github.io/tags/security/</link>
    <description>Recent content in Security on Veerendra&#39;s Blog</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <lastBuildDate>Fri, 11 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://veerendra2.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>User Namespace Isolation in Docker</title>
      <link>https://veerendra2.github.io/docker-userns-remap/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/docker-userns-remap/</guid>
      <description>&lt;p&gt;There is a cool feature in docker called &lt;code&gt;userns-remap&lt;/code&gt;, discovered while doing my RaspberryPi home server project; &lt;a href=&#34;https://github.com/veerendra2/raspberrypi-homeserver/issues/15#issuecomment-1296311979&#34;&gt;15#issuecomment-1296311979&lt;/a&gt;, I can just enable &lt;code&gt;userns-remap&lt;/code&gt; and docker does all remapping of &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; inside docker container to a non-root user on the host.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/security/userns-remap/&#34;&gt;https://docs.docker.com/engine/security/userns-remap/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;how-to-enable&#34;&gt;How to enable&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;*It is better to reinstall docker and remove all existing docker volumes&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add below &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;userns-remap&amp;#34;: &amp;#34;default&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Restart the docker daemon
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl restart docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Ansible automation &lt;a href=&#34;https://github.com/veerendra2/raspberrypi-homeserver/blob/main/tasks/docker.yml&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;in-action&#34;&gt;In-Action&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Run the Nginx container
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker run -it -d nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Inside, the process thinks it is running as root!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;veerendra@atom:~$ docker exec -it nginx whoami
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# But outside(on host namespace), the process running it as non-root user
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;veerendra@atom:~$ ps aux | grep nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165536    350093  0.0  0.0   6320  4688 ?        Ss   03:21   0:00 nginx: master process nginx -g daemon off;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350208  0.0  0.0   6788  4288 ?        S    03:21   0:01 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350209  0.0  0.0   6784  4284 ?        S    03:21   0:00 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350210  0.0  0.0   6784  4284 ?        S    03:21   0:01 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;165637    350212  0.0  0.0   6784  4284 ?        S    03:21   0:01 nginx: worker process
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;veerend+  937492  0.0  0.0   6420  1844 pts/0    S+   16:22   0:00 grep --color=auto nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see I have not specified any user while deploying the container, but the user inside the container is isolated i.e remapped to a non-root user(uid:&lt;code&gt;165637&lt;/code&gt;, gid:&lt;code&gt;165637&lt;/code&gt;) on the host&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encrypt your DNS queries, stay anonymous</title>
      <link>https://veerendra2.github.io/dns-encrypt/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/dns-encrypt/</guid>
      <description>&lt;p&gt;We think that connecting to a website over HTTPS is secure, which is true(not true sometimes!), but what about DNS queries that you(browser) send?&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://veerendra2.github.io/static_content/images/https_example.jpg&#34; alt=&#34;HTTPS Example&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Sure if we use HTTPS, all your (&lt;a href=&#34;https://en.wikipedia.org/wiki/POST_(HTTP)&#34;&gt;POST&lt;/a&gt; or GET) data is encrypted end-to-end which prevents eavesdropping, &lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;MITM attack&lt;/a&gt; and have &lt;a href=&#34;https://en.wikipedia.org/wiki/Confidentiality&#34;&gt;Confidentiality&lt;/a&gt;, but again what about DNS queries?&lt;/p&gt;
&lt;p&gt;I got this question back a while ago, so after a quick Internet search, I found &lt;a href=&#34;https://en.wikipedia.org/wiki/DNSCrypt&#34;&gt;DNSCrypt&lt;/a&gt; protocol which is cool because I can encrypt DNS queries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wifi Deauthentication Attack</title>
      <link>https://veerendra2.github.io/wifi-deathentication-attack/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/wifi-deathentication-attack/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A Wi-Fi deauthentication attack is a type of denial-of-service attack that targets communication between a user and a Wi-Fi wireless access point.&lt;/p&gt;
&lt;p&gt;-Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you can see, this type of attack is pretty powerful and difficult  to detect who is attacking. There are some tools(like “aircrack-ng”) for this attack(You can check the commands &lt;a href=&#34;https://www.aircrack-ng.org/doku.php?id=deauthentication&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So, basically the concept is the attacker broadcasts a wifi management “Deauthentication” frame to the victim&amp;rsquo;s devices/PC to tell them to deauthenticate. It is like, “Hey client! Can you please deauthenticate”. Once  deauthenticated, then the client will reconnect to AP (Access Point). These types of frames are supposed to send by valid “AP” to its clients, but the attacker can mimic these frames and broadcast in the network.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MAC Address Scrambling in Linux</title>
      <link>https://veerendra2.github.io/mac-scrambling/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/mac-scrambling/</guid>
      <description>&lt;p&gt;“&lt;strong&gt;MAC Address Scrambling&lt;/strong&gt;“- By the name itself we can understand, instead of using a burned-in address, the machine uses a random MAC address. The machine/device changes MAC addresses regularly to improve security.  MAC address is a 48-bit hexadecimal digit which is burned in every electronic device that has the capability of “connectivity” such as mobile devices, smart TV, PC, etc. “Apple” added this feature to iPhones from iOS8 to protect users’ privacy.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
