<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Veerendra&#39;s Blog</title>
    <link>https://veerendra2.github.io/tags/linux/</link>
    <description>Recent content in Linux on Veerendra&#39;s Blog</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Jan 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://veerendra2.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes-The Hard Way With Docker &amp; Flannel (Part 1)</title>
      <link>https://veerendra2.github.io/kubernetes-the-hard-way-1/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/kubernetes-the-hard-way-1/</guid>
      <description>&lt;p&gt;Hallo alle zusammen, after a long time I&amp;rsquo;m writing this blog and I come with an interesting and long post&lt;/p&gt;
&lt;p&gt;I know what you are thinking, I steal &lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;Kelsey Hightower&amp;rsquo;s Kubernetes The Hard Way tutorial&lt;/a&gt;, but hey!, I did some research and try to &lt;strong&gt;fit K8s cluster(Multi-Master!) in a laptop with Docker as &amp;lsquo;&lt;a href=&#34;https://kubernetes.io/docs/setup/cri/&#34;&gt;CRI&lt;/a&gt;&amp;rsquo; and Flannel as &amp;lsquo;&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/&#34;&gt;CNI&lt;/a&gt;&amp;rsquo;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This blog post follows &lt;a href=&#34;https://github.com/kelseyhightower&#34;&gt;Kelsey Hightower&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;Kubernetes The Hard Way&lt;/a&gt;, I highly recommend go through his repo. I&amp;rsquo;m writing this blog post to keep it as a reference for me and share it with other people who want to try it. So, feel free to correct me if there are any mistakes and ping me for any queries. This series is divided into 3 parts and all configuration/scripts are available in my &lt;a href=&#34;https://github.com/veerendra2/k8s-the-hard-way-blog&#34;&gt;github repo&lt;/a&gt;. Well, that has been said, let&amp;rsquo;s start building the cluster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes-The Hard Way With Docker &amp; Flannel (Part 2)</title>
      <link>https://veerendra2.github.io/kubernetes-the-hard-way-2/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/kubernetes-the-hard-way-2/</guid>
      <description>&lt;p&gt;Welcome back to &amp;ldquo;Kubernetes-The Hard Way With Docker &amp;amp; Flannel&amp;rdquo; series part 2. In &lt;a href=&#34;https://veerendra2.github.io/kubernetes-the-hard-way-1/&#34; title=&#34;previous post&#34;&gt;previous post&lt;/a&gt; we have provisioned compute resources, generated certificates and kubeconfig files. In this post, we will install and configure controller nodes&lt;/p&gt;
&lt;h1 id=&#34;6-bootstrapping-the-etcd-cluster&#34;&gt;6. Bootstrapping the etcd Cluster&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://coreos.com/etcd/&#34;&gt;&lt;code&gt;etcd&lt;/code&gt;&lt;/a&gt; is a consistent and highly-available key value storage DB. Kubernetes stores all cluster data in &lt;code&gt;etcd&lt;/code&gt; via api-server. In this section, we will install and configure &lt;code&gt;etcd&lt;/code&gt; on all controller nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes-The Hard Way With Docker &amp; Flannel (Part 3)</title>
      <link>https://veerendra2.github.io/kubernetes-the-hard-way-3/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/kubernetes-the-hard-way-3/</guid>
      <description>&lt;p&gt;Welcome to the final part of &amp;ldquo;Kubernetes-The Hard Way With Docker &amp;amp; Flannel&amp;rdquo; series. In &lt;a href=&#34;https://veerendra2.github.io/kubernetes-the-hard-way-1/&#34; title=&#34;part-1&#34;&gt;part-1&lt;/a&gt;, we discussed our cluster architecture, provisioned compute resources, generated certificates and kubeconfig. In &lt;a href=&#34;https://veerendra2.github.io/kubernetes-the-hard-way-2/&#34; title=&#34;part-2&#34;&gt;part-2&lt;/a&gt;, we have bootstrapped controller nodes.&lt;/p&gt;
&lt;p&gt;In this post, we will bootstrap worker nodes and at the end, perform a smoke test on the cluster&lt;/p&gt;
&lt;h2 id=&#34;9-bootstrapping-the-kubernetes-worker-nodes&#34;&gt;9. Bootstrapping the Kubernetes Worker Nodes&lt;/h2&gt;
&lt;p&gt;As the title of this post &amp;ldquo;Kubernetes The Hard Way With Docker &amp;amp; Flannel&amp;rdquo;, what we are going to do now is different from &lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;Kelsey Hightower&amp;rsquo;s Kubernetes The Hard Way tutorial&lt;/a&gt; i.e. container runtime interface is &lt;code&gt;docker&lt;/code&gt; instead of &lt;code&gt;containerd&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux pseudo files &amp; cheat sheet</title>
      <link>https://veerendra2.github.io/linux-cheatseets/</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/linux-cheatseets/</guid>
      <description>&lt;p&gt;*&lt;em&gt;A blog post that I’m actively collecting “Linux pseudo files info, cheat sheets and tips”&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;tips--tricks&#34;&gt;Tips &amp;amp; Tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to force a command to return exit code 0 even if the command exited non-zero?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to install dependencies of .deb automatically which failed to install previously?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example Solution:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ dpkg -i r-base-core_3.3.3-1trusty0_amd64.deb &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; : &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get --yes --force-yes -o Dpkg::Options::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;--force-confdef&amp;#34;&lt;/span&gt; -o Dpkg::Options::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;--force-confold&amp;#34;&lt;/span&gt; -f install -y &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to traverse directories in shell script?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Open vSwitch installation on Redhat7 OS</title>
      <link>https://veerendra2.github.io/openvswitch-redhat/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/openvswitch-redhat/</guid>
      <description>&lt;p&gt;Long back before I worked on Openshift which is really a great container platform tool from Redhat. But installation is not as simple as Kubernetes(relatively). One of the prerequisites for the cluster deployment is Open vSwitch.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s see how to install Open vSwitch v2.6.1 in RedHat7 step by step&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install dependencies&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo yum install gcc make python-devel openssl-devel &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      kernel-devel graphviz kernel-debug-devel &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      autoconf automake rpm-build redhat-rpm-config &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      libtool
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grab OpenvSwitch source from &lt;a href=&#34;http://www.openvswitch.org/download/&#34;&gt;http://www.openvswitch.org/download/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>KVM Hypervisor Cheat Sheets</title>
      <link>https://veerendra2.github.io/kvm-hyperviour-cheatsheets/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/kvm-hyperviour-cheatsheets/</guid>
      <description>&lt;h3 id=&#34;1-install-packages&#34;&gt;1. Install Packages&lt;/h3&gt;
&lt;p&gt;Check system  is  capable of running KVM by running &lt;a href=&#34;http://manpages.ubuntu.com/manpages/trusty/man1/kvm-ok.1.html&#34;&gt;&lt;code&gt;kvm-ok&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ apt-get install qemu-kvm qemu-system libvirt-bin bridge-utils virt-manager -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-kvmqemu-hard-disk-file&#34;&gt;Create KVM/Qemu Hard Disk File&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ qemu-img create -f raw &amp;lt;name&amp;gt;.img &amp;lt;Size&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ qemu-img create -f raw ubuntu14-HD.img 10G
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Then copy the HD file to &lt;code&gt;/var/lib/libvirt/images/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;launch-vm-with-virt-install&#34;&gt;Launch VM with &lt;code&gt;virt-install&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virt-install --name spinnaker &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--ram &lt;span class=&#34;m&#34;&gt;11096&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--vcpus&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--os-type linux &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--os-variant&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ubuntutrusty &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--accelerate &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--nographics -v  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--disk &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/lib/libvirt/images/ubuntu14-HD.img,size&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--extra-args &lt;span class=&#34;s2&#34;&gt;&amp;#34;console=ttyS0&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--location /opt/ubuntu14.iso --force &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--network bridge:virbr0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Explanation&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encrypt your DNS queries, stay anonymous</title>
      <link>https://veerendra2.github.io/dns-encrypt/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/dns-encrypt/</guid>
      <description>&lt;p&gt;We think that connecting to a website over HTTPS is secure, which is true(not true sometimes!), but what about DNS queries that you(browser) send?&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://veerendra2.github.io/static_content/images/https_example.jpg&#34; alt=&#34;HTTPS Example&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Sure if we use HTTPS, all your (&lt;a href=&#34;https://en.wikipedia.org/wiki/POST_(HTTP)&#34;&gt;POST&lt;/a&gt; or GET) data is encrypted end-to-end which prevents eavesdropping, &lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;MITM attack&lt;/a&gt; and have &lt;a href=&#34;https://en.wikipedia.org/wiki/Confidentiality&#34;&gt;Confidentiality&lt;/a&gt;, but again what about DNS queries?&lt;/p&gt;
&lt;p&gt;I got this question back a while ago, so after a quick Internet search, I found &lt;a href=&#34;https://en.wikipedia.org/wiki/DNSCrypt&#34;&gt;DNSCrypt&lt;/a&gt; protocol which is cool because I can encrypt DNS queries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wifi Deauthentication Attack</title>
      <link>https://veerendra2.github.io/wifi-deathentication-attack/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/wifi-deathentication-attack/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A Wi-Fi deauthentication attack is a type of denial-of-service attack that targets communication between a user and a Wi-Fi wireless access point.&lt;/p&gt;
&lt;p&gt;-Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you can see, this type of attack is pretty powerful and difficult  to detect who is attacking. There are some tools(like “aircrack-ng”) for this attack(You can check the commands &lt;a href=&#34;https://www.aircrack-ng.org/doku.php?id=deauthentication&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So, basically the concept is the attacker broadcasts a wifi management “Deauthentication” frame to the victim&amp;rsquo;s devices/PC to tell them to deauthenticate. It is like, “Hey client! Can you please deauthenticate”. Once  deauthenticated, then the client will reconnect to AP (Access Point). These types of frames are supposed to send by valid “AP” to its clients, but the attacker can mimic these frames and broadcast in the network.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNU screen commands(Cheat Sheet)</title>
      <link>https://veerendra2.github.io/gnu-screen-commands/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/gnu-screen-commands/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;GNU Screen is a terminal multiplexer, a software application that can be used to multiplex several virtual consoles, allowing a user to access multiple separate login sessions inside a single terminal window, or detach and reattach sessions from a terminal. It is useful for dealing with multiple programs from a command line interface, and for separating programs from the session of the Unix shell that started the program, particularly so a remote process continues running even when the user is disconnected. &lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_Screen&#34;&gt;more&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>MAC Address Scrambling in Linux</title>
      <link>https://veerendra2.github.io/mac-scrambling/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://veerendra2.github.io/mac-scrambling/</guid>
      <description>&lt;p&gt;“&lt;strong&gt;MAC Address Scrambling&lt;/strong&gt;“- By the name itself we can understand, instead of using a burned-in address, the machine uses a random MAC address. The machine/device changes MAC addresses regularly to improve security.  MAC address is a 48-bit hexadecimal digit which is burned in every electronic device that has the capability of “connectivity” such as mobile devices, smart TV, PC, etc. “Apple” added this feature to iPhones from iOS8 to protect users’ privacy.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
