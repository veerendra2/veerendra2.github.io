<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>linux on Veerendra&#39;s Blog</title>
    <link>https://veerendra2.github.io/tags/linux/</link>
    <description>Recent content in linux on Veerendra&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://veerendra2.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes-The Hard Way With Docker &amp; Flannel (Part 1)</title>
      <link>https://veerendra2.github.io/kubernetes-the-hard-way-1/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/kubernetes-the-hard-way-1/</guid>
      <description>Hallo alle zusammen, after a long time I&amp;rsquo;m writing this blog and I come with an interesting and long post
I know what you are thinking, I steal Kelsey Hightower&amp;rsquo;s Kubernetes The Hard Way tutorial, but hey!, I did some research and try to fit K8s cluster(Multi-Master!) in a laptop with Docker as &amp;lsquo;CRI&amp;rsquo; and Flannel as &amp;lsquo;CNI&amp;rsquo;.
This blog post follows Kelsey Hightower&amp;rsquo;s Kubernetes The Hard Way, I highly recommend go through his repo.</description>
    </item>
    
    <item>
      <title>Kubernetes-The Hard Way With Docker &amp; Flannel (Part 2)</title>
      <link>https://veerendra2.github.io/kubernetes-the-hard-way-2/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/kubernetes-the-hard-way-2/</guid>
      <description>Welcome back to &amp;ldquo;Kubernetes-The Hard Way With Docker &amp;amp; Flannel&amp;rdquo; series part 2. In previous post we have provisioned compute resources, generated certificates and kubeconfig files. In this post, we will install and configure controller nodes
6. Bootstrapping the etcd Cluster etcd is a consistent and highly-available key value storage DB. Kubernetes stores all cluster data in etcd via api-server. In this section, we will install and configure etcd on all controller nodes.</description>
    </item>
    
    <item>
      <title>Kubernetes-The Hard Way With Docker &amp; Flannel (Part 3)</title>
      <link>https://veerendra2.github.io/kubernetes-the-hard-way-3/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/kubernetes-the-hard-way-3/</guid>
      <description>Welcome to the final part of &amp;ldquo;Kubernetes-The Hard Way With Docker &amp;amp; Flannel&amp;rdquo; series. In part-1, we discussed our cluster architecture, provisioned compute resources, generated certificates and kubeconfig. In part-2, we have bootstrapped controller nodes.
In this post, we will bootstrap worker nodes and at the end, perform a smoke test on the cluster
9. Bootstrapping the Kubernetes Worker Nodes As the title of this post &amp;ldquo;Kubernetes The Hard Way With Docker &amp;amp; Flannel&amp;rdquo;, what we are going to do now is different from Kelsey Hightower&amp;rsquo;s Kubernetes The Hard Way tutorial i.</description>
    </item>
    
    <item>
      <title>Linux pseudo files &amp; cheat sheet</title>
      <link>https://veerendra2.github.io/linux-cheatseets/</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/linux-cheatseets/</guid>
      <description>*A blog post that I’m actively collecting “Linux pseudo files info, cheat sheets and tips”
Tips &amp;amp; Tricks How to force a command to return exit code 0 even if the command exited non-zero?
How to install dependencies of .deb automatically which failed to install previously?
Example Solution:
$ dpkg -i r-base-core_3.3.3-1trusty0_amd64.deb || : \ &amp;amp;&amp;amp; apt-get --yes --force-yes -o Dpkg::Options::=&amp;#34;--force-confdef&amp;#34; -o Dpkg::Options::=&amp;#34;--force-confold&amp;#34; -f install -y \ How to traverse directories in shell script?</description>
    </item>
    
    <item>
      <title>Open vSwitch installation on Redhat7 OS</title>
      <link>https://veerendra2.github.io/openvswitch-redhat/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/openvswitch-redhat/</guid>
      <description>Long back before I worked on Openshift which is really a great container platform tool from Redhat. But installation is not as simple as Kubernetes(relatively). One of the prerequisites for the cluster deployment is Open vSwitch.
Now let&amp;rsquo;s see how to install Open vSwitch v2.6.1 in RedHat7 step by step
Install dependencies
$ sudo yum install gcc make python-devel openssl-devel \ kernel-devel graphviz kernel-debug-devel \ autoconf automake rpm-build redhat-rpm-config \ libtool Grab OpenvSwitch source from http://www.</description>
    </item>
    
    <item>
      <title>KVM Hypervisor Cheat Sheets</title>
      <link>https://veerendra2.github.io/kvm-hyperviour-cheatsheets/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/kvm-hyperviour-cheatsheets/</guid>
      <description>1. Install Packages Check system is capable of running KVM by running kvm-ok
$ apt-get install qemu-kvm qemu-system libvirt-bin bridge-utils virt-manager -y Create KVM/Qemu Hard Disk File $ qemu-img create -f raw &amp;lt;name&amp;gt;.img &amp;lt;Size&amp;gt; ## Example $ qemu-img create -f raw ubuntu14-HD.img 10G Then copy the HD file to /var/lib/libvirt/images/ Launch VM with virt-install virt-install --name spinnaker \ --ram 11096 \ --vcpus=4 \ --os-type linux \ --os-variant=ubuntutrusty \ --accelerate \ --nographics -v \ --disk path=/var/lib/libvirt/images/ubuntu14-HD.</description>
    </item>
    
    <item>
      <title>Encrypt your DNS queries, stay anonymous</title>
      <link>https://veerendra2.github.io/dns-encrypt/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/dns-encrypt/</guid>
      <description>We think that connecting to a website over HTTPS is secure, which is true(not true sometimes!), but what about DNS queries that you(browser) send?
Sure if we use HTTPS, all your (POST or GET) data is encrypted end-to-end which prevents eavesdropping, MITM attack and have Confidentiality, but again what about DNS queries?
I got this question back a while ago, so after a quick Internet search, I found DNSCrypt protocol which is cool because I can encrypt DNS queries.</description>
    </item>
    
    <item>
      <title>Wifi Deauthentication Attack</title>
      <link>https://veerendra2.github.io/wifi-deathentication-attack/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/wifi-deathentication-attack/</guid>
      <description>A Wi-Fi deauthentication attack is a type of denial-of-service attack that targets communication between a user and a Wi-Fi wireless access point.
-Wikipedia
As you can see, this type of attack is pretty powerful and difficult to detect who is attacking. There are some tools(like “aircrack-ng”) for this attack(You can check the commands here).
So, basically the concept is the attacker broadcasts a wifi management “Deauthentication” frame to the victim&amp;rsquo;s devices/PC to tell them to deauthenticate.</description>
    </item>
    
    <item>
      <title>GNU screen commands(Cheat Sheet)</title>
      <link>https://veerendra2.github.io/gnu-screen-commands/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/gnu-screen-commands/</guid>
      <description>GNU Screen is a terminal multiplexer, a software application that can be used to multiplex several virtual consoles, allowing a user to access multiple separate login sessions inside a single terminal window, or detach and reattach sessions from a terminal. It is useful for dealing with multiple programs from a command line interface, and for separating programs from the session of the Unix shell that started the program, particularly so a remote process continues running even when the user is disconnected.</description>
    </item>
    
    <item>
      <title>MAC Address Scrambling in Linux</title>
      <link>https://veerendra2.github.io/mac-scrambling/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://veerendra2.github.io/mac-scrambling/</guid>
      <description>“MAC Address Scrambling“- By the name itself we can understand, instead of using a burned-in address, the machine uses a random MAC address. The machine/device changes MAC addresses regularly to improve security. MAC address is a 48-bit hexadecimal digit which is burned in every electronic device that has the capability of “connectivity” such as mobile devices, smart TV, PC, etc. “Apple” added this feature to iPhones from iOS8 to protect users’ privacy.</description>
    </item>
    
  </channel>
</rss>
